// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String        @id @default(cuid())
  name          String?
  email         String       @unique
  status    MembershipStatus @default(ACTIVE)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignments   Assignment[]

  assignmentProgress AssignmentProgress[]

  userRequest UserRequest[]

  AssignmentRequest AssignmentRequest[]
}

model Assignment {
  id        String   @id @default(cuid())
  title     String
  content   String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  genreId   String?
  genre     Genre?   @relation(fields: [genreId], references: [id])


  assignmentProgress AssignmentProgress[]
}

enum ProgressStatus {
  NOT_STARTED   // 未着手
  IN_PROGRESS   // 着手中
  IN_REVIEW     // レビュー中
  DONE          // 完了
}

model UserRequest {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      RequestType
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  actedAt   DateTime?
  actedBy   String?
}

model AssignmentProgress {
  userId       String
  assignmentId String
  status       ProgressStatus @default(NOT_STARTED)
  updatedAt    DateTime        @updatedAt
  
  user         User       @relation(fields: [userId], references: [id])
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@id([userId, assignmentId])
}

enum AssignmentRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model AssignmentRequest {
  id        String  @id @default(cuid())
  userId    String
  genreId   String
  status    AssignmentRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  actedAt   DateTime?

  user  User  @relation(fields: [userId], references: [id])
  genre Genre @relation(fields: [genreId], references: [id])

  @@unique([userId, genreId, status], name: "user_genre_unique_pending")
}

enum MembershipStatus {
  ACTIVE
  PAUSED
  WITHDRAWN
}

enum RequestType {
  PAUSE
  WITHDRAW
  RESUME
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Genre {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  order       Int          @default(0)   
  assignments Assignment[]

  AssignmentRequest AssignmentRequest[]
}




model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
